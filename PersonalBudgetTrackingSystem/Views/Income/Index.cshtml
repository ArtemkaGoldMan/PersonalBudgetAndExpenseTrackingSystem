@model dynamic

@{
    ViewData["Title"] = "Income";
}

<h2>Income</h2>
<a href="@Url.Action("Create", "Income")" class="btn btn-primary mb-3">Add New Income</a>

<table class="table">
    <thead>
        <tr>
            <th class="text-center">#</th>
            <th>Source</th>
            <th>Amount</th>
            <th>Date</th>
            <th class="text-right">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var income in Model.IncomeList)
        {
            <tr>
                <td class="text-center">@income.Id</td>
                <td>@income.Source</td>
                <td>@income.Amount</td>
                <td>@income.Date.ToShortDateString()</td>
                <td class="td-actions text-right">
                    <a href="@Url.Action("Edit", "Income", new { id = income.Id })" class="btn btn-info btn-sm btn-icon">
                        <i class="now-ui-icons ui-2_settings-90"></i>
                    </a>
                    <a href="@Url.Action("Delete", "Income", new { id = income.Id })" class="btn btn-danger btn-sm btn-icon">
                        <i class="now-ui-icons ui-1_simple-remove"></i>
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Chart Section -->
<div class="container mt-5">
    <h3>Monthly Income Chart</h3>
    <canvas id="monthlyIncomeChart" width="300" height="150"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Get the monthly income data from the model
    var monthlyIncomeData = @Html.Raw(Json.Serialize(Model.MonthlyIncome));
    console.log(monthlyIncomeData);  // Ensure the data is correctly logged

    // Sort the data by year and month (ascending order)
    monthlyIncomeData.sort(function (a, b) {
        var dateA = new Date(a.yearMonth.split('/')[1], a.yearMonth.split('/')[0] - 1);  // MM/YYYY -> Date object
        var dateB = new Date(b.yearMonth.split('/')[1], b.yearMonth.split('/')[0] - 1);  // MM/YYYY -> Date object
        return dateA - dateB;  // Compare dates (ascending order)
    });

    // Prepare the chart labels (Month/Year) and data (Total Income)
    var labels = monthlyIncomeData.map(function (data) {
        return data.yearMonth;  // Correctly access 'yearMonth' for the labels
    });

    var data = monthlyIncomeData.map(function (data) {
        return data.totalAmount;  // Correctly access 'totalAmount' for the chart data
    });

    // Log the labels and data to ensure they're correct
    console.log(labels);
    console.log(data);

    // Create the chart
    var ctx = document.getElementById('monthlyIncomeChart').getContext('2d');
    var monthlyIncomeChart = new Chart(ctx, {
        type: 'line',  // Use line chart (you can also use 'bar' if you prefer)
        data: {
            labels: labels,  // X-axis labels (Month/Year)
            datasets: [{
                label: 'Monthly Income',
                data: data,  // Y-axis data (Total income)
                borderColor: '#4bc0c0',
                fill: false,  // Set to true if you want the line to be filled
                tension: 0.1   // Smoothness of the line
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function (value) {
                            return '$' + value.toLocaleString();  // Format Y-axis as currency
                        }
                    }
                }
            }
        }
    });
</script>

